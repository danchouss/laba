import math
import time
import pygame
from pygame.draw import *
from random import randint
pygame.init()


#задаём цвета и готовим "экран" для работы
FPS = 12
w, l = (1200, 900)
screen = pygame.display.set_mode((w, l))

red = (255, 0, 0)
blue = (0, 0, 255)
brown = (150, 75, 0)
green = (0, 255, 0)
COLORS = [red, blue, brown, green]

class Ball():
    def __init__(self, x=40, y=450):
        """ Конструктор класса ball

        Args:
        x - начальное положение мяча по горизонтали
        y - начальное положение мяча по вертикали
        """
        self.x = x
        self.y = y
        self.r = 10
        self.vx = 0
        self.vy = 0
        self.color = COLORS[randint(0,3)]
        circle(screen, self.color, (self.x, self.y), self.r) #он вроде там когда отрисовывает овал, то координаты по-друому задаёт, но хз
        self.live = 30 #шо це такое


    def move(self):
        """Переместить мяч по прошествии единицы времени.

        Метод описывает перемещение мяча за один кадр перерисовки. То есть, обновляет значения
        self.x и self.y с учетом скоростей self.vx и self.vy, силы гравитации, действующей на мяч,
        и стен по краям окна (размер окна 800х600).
        """
        if (self.x + self.r) > 1200 or (self.x - self.r) < 0:
            self.vx = -self.vx

        if (self.y + self.r) > 900 or (self.y - self.r) < 0:
            self.vy = -self.vy

        self.x += self.vx
        self.vy -= self.vy*FPS #fps мб можно убрать
        self.y += self.vy -5*FPS**2

        def hittest(self, obj):
            """Функция проверяет сталкивалкивается ли данный обьект с целью, описываемой в обьекте obj.

            Args:
                obj: Обьект, с которым проверяется столкновение.
            Returns:
                Возвращает True в случае столкновения мяча и цели. В противном случае возвращает False.
            """
            # FIXME
            return False

class Gun():
    def __init__(self):
        self.f2_power = 10
        self.f2_on = 0
        self.an = 1
        line(screen, blue, [20, 450], [50, 420], 7)

    def fire2_start(self, event):
        self.f2_on = 1

    def fire2_end(self, event):
        """Выстрел мячом.

        Происходит при отпускании кнопки мыши.
        Начальные значения компонент скорости мяча vx и vy зависят от положения мыши.
        """
        global balls, bullet
        bullet += 1
        new_ball = Ball()
        new_ball.r += 5
        self.an = math.atan((event.y - new_ball.y) / (event.x - new_ball.x))
        new_ball.vx = self.f2_power * math.cos(self.an)
        new_ball.vy = - self.f2_power * math.sin(self.an)
        balls += [new_ball]
        self.f2_on = 0
        self.f2_power = 10

    def targetting(self, event=0):
        """Прицеливание. Зависит от положения мыши."""
        if event:
            self.an = math.atan((event.y - 450) / (event.x - 20))
        #допилить потом изменение цвета и увеличение пушки при прицеливании

    #хз что делает, но навреное надо допилить
    def power_up(self):
        if self.f2_on:
            if self.f2_power < 100:
                self.f2_power += 1

class target():
    def __init__(self):
        self.points = 0
        self.live = 1
        # FIXME: don't work!!! How to call this functions when object is created?
        # self.id = canv.create_oval(0,0,0,0)
        # self.id_points = canv.create_text(30,30,text = self.points,font = '28')
        # self.new_target()

        def new_target(self):
            """ Инициализация новой цели. """
            x = self.x = randint(600, 780)
            y = self.y = randint(300, 550)
            r = self.r = randint(2, 50)
            color = self.color = 'red'
            circle(screen, color, (x, y), r)

        def hit(self, points=1):
            """Попадание шарика в цель."""
            canv.coords(self.id, -10, -10, -10, -10) #проверяет, попал ли шарик в цель, используется def hittest, которая не была прописана
            self.points += points
            # canv.itemconfig(self.id_points, text=self.points) - этим он типо выводит очки


t1 = target()
screen1 = canv.create_text(400, 300, text='', font='28')
g1 = gun()
bullet = 0
balls = []

#переделать в нормальный вид
def new_game(event=''):
    global gun, t1, screen1, balls, bullet
    t1.new_target()
    bullet = 0
    balls = []
    #переделать 3 строчки под пайгеймовский вид с MOUSEBUTTONDOWN
    canv.bind('<Button-1>', g1.fire2_start)
    canv.bind('<ButtonRelease-1>', g1.fire2_end)
    canv.bind('<Motion>', g1.targetting)

    z = 0.03
    t1.live = 1
    while t1.live or balls:
        for b in balls:
            b.move()
            if b.hittest(t1) and t1.live:
                t1.live = 0
                t1.hit()
                canv.bind('<Button-1>', '')
                canv.bind('<ButtonRelease-1>', '')
                canv.itemconfig(screen1, text='Вы уничтожили цель за ' + str(bullet) + ' выстрелов')
        canv.update()
        time.sleep(0.03)
        g1.targetting()
        g1.power_up()
    canv.itemconfig(screen1, text='')
    canv.delete(gun)
    root.after(750, new_game)


new_game()

mainloop()
